(this.webpackJsonppages=this.webpackJsonppages||[]).push([[213],{350:function(e,n,t){"use strict";t.r(n);var i=t(0),a=t(14),r=t(58),o=t(1),s=Object(i.lazy)((function(){return Promise.all([t.e(0),t.e(1)]).then(t.bind(null,102))}));n.default=function(e){var n=e.link,t=e.linkName;return Object(o.jsxs)("div",{className:"info-page",children:[Object(o.jsxs)(a.b,{className:"guide-back-button",to:n,children:[Object(o.jsx)(r.a,{icon:"arrow-left"})," ",t]}),Object(o.jsx)("h2",{children:"Line of sight"}),Object(o.jsx)("p",{children:"The actual line of sight algorithm is below. A line from 0,2 to 3,6 produces a path like this:"}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(s,{code:"# 0 values from height map have been replaced with ' ' (space):\n[ , , , , , , ],\n[ , , , , , , ],\n[x,x,x,x, , , ],\n[ , , , ,x,x,x],\n[ , , , , , , ],\n[ , , , , , , ],\n[ , , , , , , ]"})}),Object(o.jsx)("p",{children:"This means that a high cover obstacle does not block it at 3,3:"}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(s,{code:"# 0 values from height map have been replaced with ' ' (space):\n[ , , , , , , ],\n[ , , , , , , ],\n[x,x,x,x, , , ],\n[ , , ,2,x,x,x],\n[ , , , , , , ],\n[ , , , , , , ],\n[ , , , , , , ]"})}),Object(o.jsx)("p",{children:"But it does block it at 3,2:"}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(s,{code:"# 0 values from height map have been replaced with ' ' (space):\n[ , , , , , , ],\n[ , , , , , , ],\n[x,x,x,2, , , ],\n[ , , , , , , ],\n[ , , , , , , ],\n[ , , , , , , ],\n[ , , , , , , ]"})}),Object(o.jsx)("p",{children:"This demonstrates that it is an approximation. Even a ray-traced line would be in most cases an approximation when calculated by a computer with limited accuracy. However, as long as the algorithm is known (see below) and the same one is used, it does not give bias to either team."}),Object(o.jsx)("p",{children:"There are some of exception where a line of sight is blocked even if the path of a line does not directly travel over an obstacle. For example in a diagonal movement, if the line has high obstacles on both sides of the line (like a perpendicular line), then the line cannot pass between them (see below)."}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(s,{code:"# Fine:\n[ , , , , , , ],\n[ , , , , , , ],\n[x,x,x,x, , , ],\n[ , , ,2,x,x,x],\n[ , , , , , , ],\n[ , , , , , , ],\n[ , , , , , , ]\n# Fine:\n[ , , , , , , ],\n[ , , , , , , ],\n[x,x,x,x,2, , ],\n[ , , , ,x,x,x],\n[ , , , , , , ],\n[ , , , , , , ],\n[ , , , , , , ]\n# Cannot get through:\n[ , , , , , , ],\n[ , , , , , , ],\n[x,x,x,x,2, , ],\n[ , , ,2, , , ],\n[ , , , , , , ],\n[ , , , , , , ],\n[ , , , , , , ]"})}),Object(o.jsx)("p",{children:"In the above case, the obstacle that the line hits is determined randomly and either obstacle has an equal chance of being hit."}),Object(o.jsx)("p",{children:"Another exception in diagonal movement is when there are multiple obstacles on either side but not immediately next to each other. See below:"}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(s,{code:"# The line from attacker (a) to target (t):\n[a, , , , , , ],\n[ ,x, , , , , ],\n[ , ,x, , , , ],\n[ , , ,x, , , ],\n[ , , , ,x, , ],\n[ , , , , ,x, ],\n[ , , , , , ,t]\n# Fine, only obstacles on left side side of attacker (a):\n[a, , , , , , ],\n[ ,x,2, , , , ],\n[ , ,x,2, , , ],\n[ , , ,x, , , ],\n[ , , , ,x,2, ],\n[ , , , , ,x, ],\n[ , , , , , ,t]\n# Fine, the attacker (a) could lean right and still\n# hit the target as there is only one obstacle\n# on the right after all the obstacles on the left:\n[a, , , , , , ],\n[ ,x,2, , , , ],\n[ , ,x,2, , , ],\n[ , , ,x, , , ],\n[ , , ,2,x, , ],\n[ , , , , ,x, ],\n[ , , , , , ,t]\n# The line hits the third obstacle on the left.\n# The line no longer gets through between the\n# obstacles because the attacker (a)\n# cannot lean in either direction without\n# hitting an obstacle:\n[a, , , , , , ],\n[ ,x,2, , , , ],\n[ , ,x,2, , , ],\n[ , , ,x, , , ],\n[ , , ,2,x,2, ],\n[ , , , , , , ],\n[ , , , , , ,t]\n# Fine, attacker (a) can lean right:\n[a, , , , , , ],\n[ ,x, , , , , ],\n[ , ,x,2, , , ],\n[ , , ,x, , , ],\n[ , , ,2,x, , ],\n[ , , , ,2,x, ],\n[ , , , , , ,t]\n# Fine, attacker (a) can lean left:\n[a, , , , , , ],\n[2,x, , , , , ],\n[ ,2,x,2, , , ],\n[ , , ,x,2, , ],\n[ , , , ,x,2, ],\n[ , , , , ,x,2],\n[ , , , , , ,t]"})}),Object(o.jsx)("p",{children:"If the obstacles alternate between both sides, then the line hits (terminates) on the second alteration. For example: if there are obstacles on the left hand side of the line first on diagonal movements and then on the right hand side of the line, and then again on left hand side, the line will then terminate on the left hand side. There can be any number of obstacles on one side and then on the other side as long as there are no more obstacles on the first side, and the line will not be terminated."}),Object(o.jsx)("h3",{children:"Line of sight algorithm"}),Object(o.jsx)("p",{children:"It is important that the line of sight calculations produce the same results whether it is the bot and the host doing the calculation. While ray-casting produce excellent results and is easy to implement, it often uses floating points and can produce different results on different languages and processors. It may be necessary to move to ray-casting if more levels are added for the maps in future seasons."}),Object(o.jsxs)("p",{children:["A well known ",Object(o.jsx)("a",{className:"inline",href:"https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm",children:"Bresenham's line algorithm"})," is used for figuring line of sight. It is important to note that not all implementations of Bresenham's line algorithm produce the same results. For instance, the last pseudocode implementation on the wikipedia page is not reversible and the order may not be guaranteed. This can be verified with x1, y1, x2, y2 = 2, 0, 0, 12 and then swap the x1 with x2 and y1 with y2. You will end up with two different lines. Reversibility is important to make sure that your units have the same opportunity to shoot at the enemy as the enemy has to you. If the line is different to your unit than it is to the enemy's then one of you may get an obstacle on the way that blocks the shot and visibility."]}),Object(o.jsx)("p",{children:"Here is a Bresenham's line algorithm implementation from the wikipedia page in Python that produces the same line even when x1,y1 and x2,y2 are swapped."}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(s,{code:"# Horizontal-ish line:\ndef line_low(x0, y0, x1, y1):\n    l = list()\n    dx = x1 - x0\n    dy = y1 - y0\n    yi = 1\n    if dy < 0:\n        yi = -1\n        dy = -dy\n    D = (2 * dy) - dx\n    y = y0\n\n    xi = 1\n    if dx < 0:\n        xi = -1\n\n    x = x0\n    while x != x1:\n        l.append([x, y])\n        if D > 0:\n            y += yi\n            D += 2 * (dy - dx)\n        else:\n            D += 2 * dy\n        x += xi\n\n    l.append([x1, y])\n    return l\n\n# Vertical-ish line:\ndef line_high(x0, y0, x1, y1):\n    l = list()\n    dx = x1 - x0\n    dy = y1 - y0\n    xi = 1\n    if dx < 0:\n        xi = -1\n        dx = -dx\n    D = (2 * dx) - dy\n    x = x0\n\n    yi = 1\n    if dy < 0:\n        yi = -1\n\n    y = y0\n    while y != y1:\n        l.append([x, y])\n        if D > 0:\n            x += xi\n            D += 2 * (dx - dy)\n        else:\n            D += 2 * dx\n        y += yi\n\n    l.append([x, y1])\n    return l\n\n# Produces the actual path for a given line:\ndef line(x0, y0, x1, y1):\n    if abs(y1-y0) < abs(x1-x0):\n        if x0 > x1:\n            l = line_low(x1, y1, x0, y0)\n            l.reverse()\n            return l\n        return line_low(x0, y0, x1, y1)\n    if y0 > y1:\n        l = line_high(x1, y1, x0, y0)\n        l.reverse()\n        return l\n    return line_high(x0, y0, x1, y1)"})}),Object(o.jsx)("p",{children:"This is the same algorithm as used by the host."}),Object(o.jsx)("p",{children:"Visibility, shooting, overwatch and other line of sight calculations are all resolved using this algorith. 1 horizontal or vertical displacement on the resulted path of the line is costs of 1 distance. 1 diagonal displacement costs 1.4 distance."}),Object(o.jsx)("p",{children:"Example 1: a line from 0,0 to 5,1 has 5 horizontal movements and 1 diagonal movement and costs (total distance) 4 * 1 + 1.4 = 5.4, but it is rounded down to 5."}),Object(o.jsx)("p",{children:"Example 2: a line from 0,0 to 4,4 has 4 diagonal movements and costs (total distance) 4 * 1.4 = 5.6, but it is rounded down to 5."})]})}},58:function(e,n,t){"use strict";t.d(n,"a",(function(){return j}));var i=t(16),a=t(15),r=t.n(a),o=t(0),s=t.n(o);function l(e){return(l="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function h(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?h(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):h(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function f(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}function u(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function x(e){return n=e,(n-=0)===n?e:(e=e.replace(/[\-_\s]+(.)?/g,(function(e,n){return n?n.toUpperCase():""}))).substr(0,1).toLowerCase()+e.substr(1);var n}function p(e){return e.split(";").map((function(e){return e.trim()})).filter((function(e){return e})).reduce((function(e,n){var t,i=n.indexOf(":"),a=x(n.slice(0,i)),r=n.slice(i+1).trim();return a.startsWith("webkit")?e[(t=a,t.charAt(0).toUpperCase()+t.slice(1))]=r:e[a]=r,e}),{})}var b=!1;try{b=!0}catch(O){}function y(e){return i.c.icon?i.c.icon(e):null===e?null:"object"===l(e)&&e.prefix&&e.iconName?e:Array.isArray(e)&&2===e.length?{prefix:e[0],iconName:e[1]}:"string"===typeof e?{prefix:"fas",iconName:e}:void 0}function m(e,n){return Array.isArray(n)&&n.length>0||!Array.isArray(n)&&n?c({},e,n):{}}function j(e){var n=e.forwardedRef,t=f(e,["forwardedRef"]),a=t.icon,r=t.mask,o=t.symbol,s=t.className,l=t.title,h=t.titleId,x=y(a),p=m("classes",[].concat(u(function(e){var n,t=e.spin,i=e.pulse,a=e.fixedWidth,r=e.inverse,o=e.border,s=e.listItem,l=e.flip,h=e.size,d=e.rotation,f=e.pull,u=(c(n={"fa-spin":t,"fa-pulse":i,"fa-fw":a,"fa-inverse":r,"fa-border":o,"fa-li":s,"fa-flip-horizontal":"horizontal"===l||"both"===l,"fa-flip-vertical":"vertical"===l||"both"===l},"fa-".concat(h),"undefined"!==typeof h&&null!==h),c(n,"fa-rotate-".concat(d),"undefined"!==typeof d&&null!==d&&0!==d),c(n,"fa-pull-".concat(f),"undefined"!==typeof f&&null!==f),c(n,"fa-swap-opacity",e.swapOpacity),n);return Object.keys(u).map((function(e){return u[e]?e:null})).filter((function(e){return e}))}(t)),u(s.split(" ")))),O=m("transform","string"===typeof t.transform?i.c.transform(t.transform):t.transform),v=m("mask",y(r)),w=Object(i.a)(x,d({},p,{},O,{},v,{symbol:o,title:l,titleId:h}));if(!w)return function(){var e;!b&&console&&"function"===typeof console.error&&(e=console).error.apply(e,arguments)}("Could not find icon",x),null;var k=w.abstract,S={ref:n};return Object.keys(t).forEach((function(e){j.defaultProps.hasOwnProperty(e)||(S[e]=t[e])})),g(k[0],S)}j.displayName="FontAwesomeIcon",j.propTypes={border:r.a.bool,className:r.a.string,mask:r.a.oneOfType([r.a.object,r.a.array,r.a.string]),fixedWidth:r.a.bool,inverse:r.a.bool,flip:r.a.oneOf(["horizontal","vertical","both"]),icon:r.a.oneOfType([r.a.object,r.a.array,r.a.string]),listItem:r.a.bool,pull:r.a.oneOf(["right","left"]),pulse:r.a.bool,rotation:r.a.oneOf([0,90,180,270]),size:r.a.oneOf(["lg","xs","sm","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"]),spin:r.a.bool,symbol:r.a.oneOfType([r.a.bool,r.a.string]),title:r.a.string,transform:r.a.oneOfType([r.a.string,r.a.object]),swapOpacity:r.a.bool},j.defaultProps={border:!1,className:"",mask:null,fixedWidth:!1,inverse:!1,flip:null,icon:null,listItem:!1,pull:null,pulse:!1,rotation:null,size:null,spin:!1,symbol:!1,title:"",transform:null,swapOpacity:!1};var g=function e(n,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("string"===typeof t)return t;var a=(t.children||[]).map((function(t){return e(n,t)})),r=Object.keys(t.attributes||{}).reduce((function(e,n){var i=t.attributes[n];switch(n){case"class":e.attrs.className=i,delete t.attributes.class;break;case"style":e.attrs.style=p(i);break;default:0===n.indexOf("aria-")||0===n.indexOf("data-")?e.attrs[n.toLowerCase()]=i:e.attrs[x(n)]=i}return e}),{attrs:{}}),o=i.style,s=void 0===o?{}:o,l=f(i,["style"]);return r.attrs.style=d({},r.attrs.style,{},s),n.apply(void 0,[t.tag,d({},r.attrs,{},l)].concat(u(a)))}.bind(null,s.a.createElement)}}]);