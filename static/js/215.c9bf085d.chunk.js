(this.webpackJsonppages=this.webpackJsonppages||[]).push([[215],{356:function(e,t,n){"use strict";n.r(t);var i=n(0),a=n(14),s=n(58),o=n(1),r=Object(i.lazy)((function(){return Promise.all([n.e(0),n.e(1)]).then(n.bind(null,102))}));t.default=function(e){var t=e.link,n=e.linkName;return Object(o.jsxs)("div",{className:"info-page",children:[Object(o.jsxs)(a.b,{className:"guide-back-button",to:t,children:[Object(o.jsx)(s.a,{icon:"arrow-left"})," ",n]}),Object(o.jsx)("h2",{children:"Notifications"}),Object(o.jsx)("p",{children:"All the messages from the host come in JSON format. This page provides a complete list of messages the host will send. The messages have a key attribute called 'action' which indicates the message type."}),Object(o.jsx)("table",{children:Object(o.jsxs)("tbody",{children:[Object(o.jsxs)("tr",{children:[Object(o.jsx)("th",{children:"action"}),Object(o.jsx)("th",{children:"Description"})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"setup"}),Object(o.jsxs)("td",{children:["Contains both the ",Object(o.jsx)(a.b,{className:"inline",to:"/guide/map",children:"heightMap"})," and the ",Object(o.jsx)(a.b,{className:"inline",to:"/guide/units",children:"units"}),". Very likely the first message. If the opponent started first and did something that caused a notification on their first turn, then it may appear before this. This always comes before the first 'startTurn' message."]})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"startTurn"}),Object(o.jsx)("td",{children:"The turn has started and the available time is ticking. Contains timeLeft attribute, which tells the amount of time left in seconds."})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"confirm"}),Object(o.jsx)("td",{children:"Confirms the success of a message or instruction that the bot had sent. Side effects depend on the instruction and the action that was requested."})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"deny"}),Object(o.jsx)("td",{children:"Denies a message or instruction that the bot sent to the host. The instruction was disregarded and the action was unsuccessful. This should not have any side effects."})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"move"}),Object(o.jsx)("td",{children:"Friendly unit has moved. Contains the name of the unit, its path, total distance moved, the final location and the amount of action points the unit has left."})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"enemy"}),Object(o.jsx)("td",{children:"Information on an enemy unit. Contains a reason attribute, which describes the reason for this message. It could be for spotting a new enemy, or the enemy moved, or it became invisible or visible."})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"shot"}),Object(o.jsx)("td",{children:"A unit shot with their weapon. Contains damage, hit, crit chance. It also has source location, target location and the exact path of the shot."})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"item"}),Object(o.jsx)("td",{children:"Enemy used an item. This is either a medikit or a grenade. Contains the unit and the target location."})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"damage"}),Object(o.jsx)("td",{children:"A unit has received damage from an item. This is either from a medikit or a grenade. Contains the unit damaging and the target being damaged, as well as the damage amount and the health after the damage."})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"obstacleShot"}),Object(o.jsx)("td",{children:"An obstacle has been shot at. Describes the shot and whether the obstacle was hit with the shot."})]}),Object(o.jsxs)("tr",{children:[Object(o.jsx)("td",{children:"obstacleUpdate"}),Object(o.jsx)("td",{children:"An obstacle on the heightMap has been updated. Describes the locations of the obstacles and the new height value for those obstacles."})]})]})}),Object(o.jsx)("h3",{children:"Notification: setup"}),Object(o.jsx)("p",{children:"The setup message is received before the very first startTurn message. However, if the enemy's turn is first then there could be another message beforehand such as if an obstacle is destroyed."}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:"import json\nmessage = json.loads(input())\nif message['action'] == 'setup':\n    #print(message['heightMap'])\n    print(message['units']) # Units\n    #print(message['cost']) # Total cost of the squad\n    # prints the units"})}),Object(o.jsx)("h3",{children:"Notification: startTurn"}),Object(o.jsxs)("p",{children:["At the start of every turn, the host sends a startTurn message. At the start of the turn each unit is restored back to 2 action points and any overwatches form friendly units are removed. If the unit has excess health from a ",Object(o.jsx)(a.b,{className:"inline",to:"/guide/items",children:"medikit"}),", the unit will take damage at the start of the turn. The host keeps track of elapsed time, which is being consumed during the turn. The startTurn message also includes the available time left (i.e. timeLeft attribute)."]}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:"import json\nmessage = json.loads(input())\nif message['action'] == 'startTurn':\n    print('New turn! Time left:', str(message['timeLeft']), 'seconds')"})}),Object(o.jsx)("p",{children:"The turn is ended with an endTurn message."}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:"import json\nprint(json.dumps({'action': 'endTurn'}))"})}),Object(o.jsx)("h3",{children:"Notification: confirm / deny"}),Object(o.jsx)("p",{children:'When sending an instruction to the host, and if it is valid JSON and contains the "action" attribute, it will be either confirmed or denied. Confirmation means the action was performed and there are side effects such as the unit in question will now have reduced action points. Deny will mean that there was something wrong with the action and it could not be performed, such as the unit may already have full ammunition and thus the weapon reload failed. There should not be side effects and the unit should not have lost any action points if the action was denied.'}),Object(o.jsx)("p",{children:"Every action message will receive either a confirmation or deny response. The responses will come in the order the action messages were sent/received. For example: sending a move command to unit-1, unit-2, unit-3, and unit-4 in that order, but the returned messages are confirm, confirm, deny and confirm. This means the unit-3 move command was denied but others were accepted (confirmed)."}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:"import json\nmessage = json.loads(input())\nif message['action'] == 'confirm':\n    print(message['confirm'], 'was confirmed.')\nif message['action'] == 'deny':\n    print(message['deny'], 'was denied, because:', message['reason'])"})}),Object(o.jsx)("p",{children:"Note: the deny message has an extra 'reason' attribute, which helps to describe what might have gone wrong."}),Object(o.jsx)("h3",{children:"Notification: move"}),Object(o.jsx)("p",{children:"Your unit has moved. This message contains the details of the move."}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:'import json\n\naction = json.loads(input())\nif action[\'action\'] == "move":\n    print("moved unit:", action[\'unit\'])\n    print("the path the unit took:", end=\' \') # list of [x, y]\n    print(", ".join(f"[{p[0]}, {p[1]}]" for p in action[\'path\'])) \n    print("current location of unit:", action[\'location\']) # [x, y]\n    print("distance travelled:", str(action[\'distance\'])) # distance points\n    print("actions points used:", str(action[\'actionsUsed\'])) # int\n    print("dashed:", action[\'actionsUsed\'] == 2)) # dashing is better against overwatch\n    print("action points left:", str(action[\'actionsLeft\'])) # int'})}),Object(o.jsx)("h3",{children:"Notification: enemy"}),Object(o.jsx)("p",{children:"When the enemy is spotted, or it becomes invisible or it moves, then this notification is provided."}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:"import json\n\nmsg = json.loads(input())\nif msg['action'] == \"enemy\":\n    enemy = msg\n    if enemy['reason'] in ['new', 'visible']:\n        print(enemy['name'], \"spotted!\")\n        print(\"Following units saw the enemy:\", \", \".join(enemy['seenBy'])) # List of friendly units who saw the enemy\n    if enemy['reason'] == 'invisible':\n        print(enemy['name'], \"got away!\")\n    if enemy['reason'] == \"move\":\n        print(\"enemy\", enemy['name'], \"moved\", end=' ') # list of [x, y]\n        print(\", \".join(f\"[{p[0]}, {p[1]}]\" for p in action['path'])) \n    print(\"Enemy's current health:\", enemy['health'])\n    print(\"Enemy's current armour bonus:\", enemy['armorBonus'])\n    print(\"The enemy's new location:\", enemy['location'])\n    print(\"The enemy is seen holding this weapon:\", enemy['weapon'])"})}),Object(o.jsx)("p",{children:"The path attribute is only provided when the enemy moves. The seenBy attribute is empty if the enemy has become invisible. The location attribute describes the last known location for the enemy. It will be the last visible location if the enemy has just become invisible. The 'new' value in the reason attribute indicates that this enemy unit is being seen the first time."}),Object(o.jsx)("h3",{children:"Notification: shot"}),Object(o.jsx)("p",{children:'When either your unit or the enemy\'s unit shoots with a weapon then both sides will be notified of this action if the action can be seen. If the enemy shoots and your units cannot see it, then you will not be notified. The notification comes in a message called "shot". The following example prints all attributes from the message:'}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:"import json\n\naction = json.loads(input())\nif action['action'] == \"shot\":\n    # Unit was hit!\n    print(\"attacking unit:\", action['unit'])\n    print(\"target unit:\", action['target'])\n    print(\"item used to attack with:\", action['item'])\n    # Attacker might have peeked and thus attacked from a peeked location:\n    print(\"attacking from:\", action['sourceLocation']) # [x, y]\n    # The location where the attacker is actually residing:\n    print(\"attacker's actual location:\", action['sourceOriginalLocation']) # [x, y]\n    # Target might have peeked and thus attacked at the peeked location:\n    print(\"target's attacked location:\", action['targetLocation']) # [x, y]\n    # Where the target peeked from:\n    print(\"target's original location:\", action['targetOriginalLocation']) # [x, y]\n    print(\"entire path of the shot:\", end=' ') # list of [x, y]\n    print(\", \".join(f\"[{p[0]}, {p[1]}]\" for p in action['path'])) \n    print(\"target was hit:\", action['hit']) # True or False\n    print(\"damage if hit:\", action['damage'])\n    # If the target's health reaches 0 or less (could be negative!)\n    # then the target is incapacitated and out of the brawl!\n    print(\"health left on the target:\", action['health'])\n    if 'hitChance' in action['action']:\n        # If your unit was the shooter, you will get extra information:\n        print(\"hit chance at the target:\", action['hitChance'])\n        print(\"rolled hit value from 0 to 100:\", action['hitRoll'])\n        print(\"was the damage a critical hit:\", action['crit']) # True or False\n        print(\"critical hit chance at the target:\", action['critChance'])\n        print(\"rolled critical hit value from 0 to 100:\", action['critRoll'])\n        print(\"distance to the target:\", action['distance'])\n        print(\"target's obstacle defence towards the unit:\", action['defense'])"})}),Object(o.jsx)("h3",{children:"Notification: item"}),Object(o.jsx)("p",{children:"When an enemy uses an item and if the enemy is visible, then this message is received."}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:"import json\n\nmsg = json.loads(input())\nif msg['action'] == \"item\":\n    print(msg['unit'], 'used', msg['item'])\n    print('it landed at:', msg['target']) # [x, y]"})}),Object(o.jsx)("p",{children:"The message tells which unit used the item, which item was being used and what was the item's target. The target could be a landing location of a grenade or the receiving unit's location for a medikit application."}),Object(o.jsx)("h3",{children:"Notification: damage"}),Object(o.jsx)("p",{children:"Damage received from items such as grenade or medikit will cause this notification message to arrive. The exception is with the use of medikit, which can be used without notifying the enemy bot if the target unit is not visible to the enemy. However, all damage from a grenade will always be notified (they are loud)."}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:"import json\n\nmsg = json.loads(input())\nif msg['action'] == \"damage\":\n    print('Unit doing damage:', msg['unit'])\n    print('Unit receiving damage:', msg['target'])\n    print('The amount of damage:', msg['damage'])\n    print('Health left on target:', msg['health'])\n    print('Damage was done with:', msg['item'])\n    print('Armour bonus left on target:', msg['armorBonus'])"})}),Object(o.jsx)("h3",{children:"Notification: obstacleShot"}),Object(o.jsx)("p",{children:"When an obstacle has been shot at with a weapon, this message will provide the details of the shot."}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:"import json\n\nmsg = json.loads(input())\nif msg['action'] == \"obstacleShot\":\n    print('Unit shooting:', msg['unit']) # Name\n    print('Location of the obstacle:', msg['targetLocation']) # [x, y]\n    print('Unit shot from here:', msg['sourceLocation']) # [x, y]\n    print(\"The path of the shot:\", end=' ') # list of [x, y]\n    print(\", \".join(f\"[{p[0]}, {p[1]}]\" for p in msg['path'])) \n    print('Obstacle was hit:', msg['hit']) # True or False\n    if 'hitChance' in msg:\n        # Extra values provided only for the shooter:\n        print('Damage was done with:', msg['hitChance']) # 0-100\n        print('Damage was done with:', msg['hitRoll']) # 0-100"})}),Object(o.jsx)("h3",{children:"Notification: obstacleUpdate"}),Object(o.jsxs)("p",{children:["Some obstacles in the ",Object(o.jsx)(a.b,{className:"inline",to:"/guide/map",children:"heightMap"})," need to be updated. This is likely due to obstacles being destroyed by a grenade or by a shot from a weapon. This message provides a list of obstacles and a new shared height value for all the obstacles in the list."]}),Object(o.jsx)(i.Suspense,{fallback:Object(o.jsx)("div",{children:"Loading..."}),children:Object(o.jsx)(r,{code:"import json\n\nmsg = json.loads(input())\nif msg['action'] == \"obstacleUpdate\":\n    print(\"The following obstacle now have a new height of\", msg['height'], end=': ') # list of [x, y]\n    print(\", \".join(f\"[{p[0]}, {p[1]}]\" for p in msg['locations'])) "})})]})}},58:function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var i=n(16),a=n(15),s=n.n(a),o=n(0),r=n.n(o);function c(e){return(c="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){h(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function f(e){return t=e,(t-=0)===t?e:(e=e.replace(/[\-_\s]+(.)?/g,(function(e,t){return t?t.toUpperCase():""}))).substr(0,1).toLowerCase()+e.substr(1);var t}function p(e){return e.split(";").map((function(e){return e.trim()})).filter((function(e){return e})).reduce((function(e,t){var n,i=t.indexOf(":"),a=f(t.slice(0,i)),s=t.slice(i+1).trim();return a.startsWith("webkit")?e[(n=a,n.charAt(0).toUpperCase()+n.slice(1))]=s:e[a]=s,e}),{})}var b=!1;try{b=!0}catch(x){}function j(e){return i.c.icon?i.c.icon(e):null===e?null:"object"===c(e)&&e.prefix&&e.iconName?e:Array.isArray(e)&&2===e.length?{prefix:e[0],iconName:e[1]}:"string"===typeof e?{prefix:"fas",iconName:e}:void 0}function g(e,t){return Array.isArray(t)&&t.length>0||!Array.isArray(t)&&t?h({},e,t):{}}function y(e){var t=e.forwardedRef,n=m(e,["forwardedRef"]),a=n.icon,s=n.mask,o=n.symbol,r=n.className,c=n.title,l=n.titleId,f=j(a),p=g("classes",[].concat(u(function(e){var t,n=e.spin,i=e.pulse,a=e.fixedWidth,s=e.inverse,o=e.border,r=e.listItem,c=e.flip,l=e.size,d=e.rotation,m=e.pull,u=(h(t={"fa-spin":n,"fa-pulse":i,"fa-fw":a,"fa-inverse":s,"fa-border":o,"fa-li":r,"fa-flip-horizontal":"horizontal"===c||"both"===c,"fa-flip-vertical":"vertical"===c||"both"===c},"fa-".concat(l),"undefined"!==typeof l&&null!==l),h(t,"fa-rotate-".concat(d),"undefined"!==typeof d&&null!==d&&0!==d),h(t,"fa-pull-".concat(m),"undefined"!==typeof m&&null!==m),h(t,"fa-swap-opacity",e.swapOpacity),t);return Object.keys(u).map((function(e){return u[e]?e:null})).filter((function(e){return e}))}(n)),u(r.split(" ")))),x=g("transform","string"===typeof n.transform?i.c.transform(n.transform):n.transform),w=g("mask",j(s)),v=Object(i.a)(f,d({},p,{},x,{},w,{symbol:o,title:c,titleId:l}));if(!v)return function(){var e;!b&&console&&"function"===typeof console.error&&(e=console).error.apply(e,arguments)}("Could not find icon",f),null;var k=v.abstract,T={ref:t};return Object.keys(n).forEach((function(e){y.defaultProps.hasOwnProperty(e)||(T[e]=n[e])})),O(k[0],T)}y.displayName="FontAwesomeIcon",y.propTypes={border:s.a.bool,className:s.a.string,mask:s.a.oneOfType([s.a.object,s.a.array,s.a.string]),fixedWidth:s.a.bool,inverse:s.a.bool,flip:s.a.oneOf(["horizontal","vertical","both"]),icon:s.a.oneOfType([s.a.object,s.a.array,s.a.string]),listItem:s.a.bool,pull:s.a.oneOf(["right","left"]),pulse:s.a.bool,rotation:s.a.oneOf([0,90,180,270]),size:s.a.oneOf(["lg","xs","sm","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"]),spin:s.a.bool,symbol:s.a.oneOfType([s.a.bool,s.a.string]),title:s.a.string,transform:s.a.oneOfType([s.a.string,s.a.object]),swapOpacity:s.a.bool},y.defaultProps={border:!1,className:"",mask:null,fixedWidth:!1,inverse:!1,flip:null,icon:null,listItem:!1,pull:null,pulse:!1,rotation:null,size:null,spin:!1,symbol:!1,title:"",transform:null,swapOpacity:!1};var O=function e(t,n){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("string"===typeof n)return n;var a=(n.children||[]).map((function(n){return e(t,n)})),s=Object.keys(n.attributes||{}).reduce((function(e,t){var i=n.attributes[t];switch(t){case"class":e.attrs.className=i,delete n.attributes.class;break;case"style":e.attrs.style=p(i);break;default:0===t.indexOf("aria-")||0===t.indexOf("data-")?e.attrs[t.toLowerCase()]=i:e.attrs[f(t)]=i}return e}),{attrs:{}}),o=i.style,r=void 0===o?{}:o,c=m(i,["style"]);return s.attrs.style=d({},s.attrs.style,{},r),t.apply(void 0,[n.tag,d({},s.attrs,{},c)].concat(u(a)))}.bind(null,r.a.createElement)}}]);