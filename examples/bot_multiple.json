[{"data": [{"data": "# This file provides helper functions.\n# See main.py file for the main program.\n\nimport json, math\n\n# Process through all incoming messages until the desired action is received.\ndef confirm(action_to_confirm, units, enemies, heightMap):\n    found = False\n    confirmed = False\n    reason = None\n    shot_counted = False\n    while not found:\n        action = json.loads(input())\n        print(\"Found:\", action)\n        if action['action'] == 'confirm' and action['confirm'] == action_to_confirm:\n            # We found the one we are looking for and got positive confirmation!\n            found = True\n            confirmed = True\n        elif action['action'] == 'deny' and action['deny'] == action_to_confirm:\n            # We found the one we are looking for but got negative confirmation.\n            # Did something go wrong? Was our movement blocked or is the unit out of ammo?\n            found = True\n            confirmed = False\n            reason = action['reason'] # Tells the reason for denial.\n        elif action['action'] == 'startTurn' and action_to_confirm == 'startTurn':\n            found = True\n            confirmed = True\n        elif action['action'] == 'move':\n            # Someone moved, lets register this!\n            unit = get_by_name(units, action['unit'])\n            if None is not unit:\n                if unit['name'] == action['unit']:\n                    unit['location'] = action['location']\n                    unit['actions'] = action['actionsLeft']\n            else:\n                print(\"WARNING: Failed to find unit:\", action)\n        elif action['action'] == 'shot':\n            # Someone shot with a weapon, lets register this!\n            enemy = get_by_name(enemies, action['target'])\n            if None is not enemy:\n                enemy['location'] = action['targetLocation']\n                enemy['health'] = action['health']\n            if None is enemy:\n                unit = get_by_name(units, action['target'])\n                if None is not unit:\n                    unit['health'] = action['health']\n                else:\n                    print(\"WARNING: Failed to find unit:\", action)\n            if not shot_counted:\n                unit = get_by_name(units, action['unit'])\n                if None is not unit:\n                    unit['ammo'] -= 1\n                    shot_counter = True\n                else:\n                    print(\"WARNING: Failed to find unit:\", action)\n                \n        elif action['action'] == 'enemy':\n            # Enemy did something! Lets keep track.\n            if action['reason'] == 'new':\n                action['visible'] = True\n                enemies.append(action)\n            else:\n                enemy = get_by_name(enemies, action['name'])\n                if None is not enemy:\n                    enemy['location'] = action['location']\n                    enemy['health'] = action['health']\n                    if action['reason'] == 'visible':\n                        enemy['visible'] = True\n                    elif action['reason'] == 'invisible':\n                        enemy['visible'] = False\n                else:\n                    print(\"WARNING: Failed to find enemy:\", action)\n        elif action['action'] == 'damage':\n            # Someone got damaged! Lets keep track.\n            enemy = get_by_name(enemies, action['target'])\n            if None is not enemy:\n                enemy['health'] = action['health']\n            if None is enemy:\n                unit = get_by_name(units, action['target'])\n                if None is not unit:\n                    unit['health'] = action['health']\n                else:\n                    print(\"WARNING: Failed to find unit:\", action)\n        elif action['action'] == 'obstacleUpdate':\n            # Obstacle was changed (likely destroyed)! Lets update our knowledge of the map.\n            for location in action['locations']:\n                heightMap[location[1]][location[0]] = action['height']\n        elif action['action'] == 'obstacleShot':\n            # Obstacle was shot at.\n            if not shot_counted:\n                unit = get_by_name(units, action['unit'])\n                if None is not unit:\n                    unit['ammo'] -= 1\n                    shot_counted = True\n                else:\n                    print(\"WARNING: Failed to find unit:\", action)\n    return confirmed, reason\n\n# When a unit is on the run, it just picks a corner and goes there.\ndef runner_action(unit, count, units, enemies, heightMap):\n    # The simple first approach, go to the corner that is not mine and not the enemy's\n    print(unit['name'], \"is running away.\")\n    target = [unit['enemyLocation'][0], unit['enemyLocation'][1]]\n    if count % 2 == 0: # Split the units into different corners\n        if target[0] < 5:\n            target[0] = len(heightMap[0]) - 1\n        else:\n            target[0] = 0\n    else:\n        if target[1] < 5:\n            target[1] = len(heightMap) - 1\n        else:\n            target[1] = 0\n    move_full(unit, target, units, enemies, heightMap)\n\n# The default action. If there are no known enemies, go to the enemy's corner.\n# If there are known enemies, go to their last known location and shoot at them.\ndef attacker_action(unit, units, enemies, heightMap):\n    print(unit['name'], \"is attacking.\")\n    enemy, dist = get_closest_enemy(unit, enemies)\n    if None is not enemy:\n        # Shoot or move closer\n        if dist < 15:\n            # Shoot!\n            print(\"Dist < 15, enemy location:\", enemy['location'], \", dist:\", dist, \", unit location:\", unit['location'])\n            confirmed, reason = attack_enemy(unit, enemy, units, enemies, heightMap)\n            if not confirmed and \"reload\" in reason:\n                try_reload_and_chicken(unit, units, enemies, heightMap)\n        elif dist < 25:\n            # Move half and then shoot\n            print(\"Dist < 25, enemy location:\", enemy['location'], \", dist:\", dist, \", unit location:\", unit['location'])\n            confirmed, reason = move_half(unit, enemy['location'], units, enemies, heightMap)\n            if not confirmed:\n                # Something went wrong, overwatch!\n                confirmed, reason = overwatch(unit, units, enemies, heightMap)\n                if not confirmed and 'reload' in reason:\n                    try_reload_and_chicken(unit, units, enemies, heightMap)\n            else:\n                confirmed, reason = attack_enemy(unit, enemy, units, enemies, heightMap)\n                if not confirmed and \"reload\" in reason:\n                    try_reload_and_chicken(unit, units, enemies, heightMap)\n        else:\n            # Move half and then overwatch\n            print(\"Dist > 25, enemy location:\", enemy['location'], \", dist:\", dist, \", unit location:\", unit['location'])\n            move_half(unit, enemy['location'], units, enemies, heightMap)\n            confirmed, reason = overwatch(unit, units, enemies, heightMap)\n            if not confirmed and 'reload' in reason:\n                try_reload_and_chicken(unit, units, enemies, heightMap)\n    if None is enemy:\n        # Find enemy\n        # Current strategy, get to where the enemy starts.\n        print(\"No enemy, move to:\", unit['enemyLocation'])\n        move_half(unit, unit['enemyLocation'], units, enemies, heightMap)\n        confirmed, reason = overwatch(unit, units, enemies, heightMap)\n        if not confirmed and 'reload' in reason:\n            try_reload_and_chicken(unit, units, enemies, heightMap)\n\ndef attack_enemy(unit, enemy, units, enemies, heightMap):\n    action = dict()\n    action['action'] = \"attack\"\n    action['unit'] = unit['name']\n    action['item'] = unit['weapon']\n    action['target'] = enemy['location']\n    action['ignoreAllies'] = True\n    print(json.dumps(action))\n    return confirm('attack', units, enemies, heightMap)\n\ndef reload_unit(unit, units, enemies, heightMap):\n    action = dict()\n    action['action'] = 'reload'\n    action['unit'] = unit['name']\n    print(json.dumps(action))\n    return confirm('reload', units, enemies, heightMap)\n\ndef overwatch(unit, units, enemies, heightMap):\n    action = dict()\n    action['action'] = 'overwatch'\n    action['unit'] = unit['name']\n    action['ignoreAllies'] = True\n    print(json.dumps(action))\n    return confirm('overwatch', units, enemies, heightMap)\n\ndef end_turn():\n    action = dict()\n    action['action'] = 'endTurn'\n    print(json.dumps(action))\n\n# Attempts to move half way between the unit and the enemy.\n# Once the unit is getting close, it should have the last action\n# point left for shooting.\ndef move_half(unit, location, units, enemies, heightMap):\n    max_distance = unit['movement'] // 2\n    x, y = unit['location'][0], unit['location'][1]\n    tx, ty = location[0], location[1]\n    dist = distance_to_target(unit, [tx, ty])\n    count = 0\n    while dist > max_distance:\n        tx = (x + tx) // 2\n        ty = (y + ty) // 2\n        dist = distance_to_target(unit, [tx, ty])\n        count += 1\n        if count > 10:\n            # Couldn't find a solution. The target is clearly too far away, move the full distance!\n            tx, ty = location[0], location[1]\n            break\n    print(\"Moving to:\", [tx, ty], \". On heightMap it has value:\", heightMap[ty][tx])\n    count = 0\n    while heightMap[ty][tx] != 0:\n        if tx > x:\n            tx -= 1\n            if heightMap[ty][tx] == 0:\n                break\n        if tx < x:\n            tx += 1\n            if heightMap[ty][tx] == 0:\n                break\n        if ty > y:\n            ty -= 1\n            if heightMap[ty][tx] == 0:\n                break\n        if ty < y:\n            ty += 1\n            if heightMap[ty][tx] == 0:\n                break\n        count += 1\n        if count > 20:\n            # failed to find a way!\n            tx, ty = location[0], location[1]\n            break\n    if count > 0:\n        print(\"Moving instead to:\", [tx, ty], \". On heightMap it has value:\", heightMap[ty][tx])\n    return move_full(unit, [int(tx), int(ty)], units, enemies, heightMap)\n\n# Attempts to move to the target location.\ndef move_full(unit, location, units, enemies, heightMap):\n    action = dict()\n    action['action'] = 'move'\n    action['unit'] = unit['name']\n    action['target'] = location\n    print(json.dumps(action))\n    return confirm('move', units, enemies, heightMap)\n\ndef try_reload_and_chicken(unit, units, enemies, heightMap):\n    confirmed, reason = reload_unit(unit, units, enemies, heightMap)\n    if not confirmed and 'no such unit is alive with enough actions' not in reason:\n        unit['runner'] = True # Out of ammo, so become a runner!\n\ndef distance(u1, u2):\n    x = u1['location'][0]\n    y = u1['location'][1]\n    dx = x - u2['location'][0]\n    dy = y - u2['location'][1]\n    return math.sqrt(dx * dx + dy * dy)\n\ndef distance_to_target(unit, target):\n    x = unit['location'][0]\n    y = unit['location'][1]\n    dx = x - target[0]\n    dy = y - target[1]\n    return math.sqrt(dx * dx + dy * dy)\n\ndef get_closest_enemy(unit, enemies):\n    if len(enemies) <= 0:\n        return None, -1\n    closest_distance = 1000\n    chosen_enemy = None\n    for enemy in enemies:\n        if enemy['health'] <= 0:\n            continue\n        dist = distance(unit, enemy)\n        if dist < closest_distance:\n            chosen_enemy = enemy\n            closest_distance = dist\n    return chosen_enemy, closest_distance\n\ndef get_by_name(units, name):\n    for unit in units:\n        if unit['name'] == name:\n            return unit\n    return None\n\n# Set 'running away' to false.\n# Set enemy location to be the opposite corner.\ndef initialise_default_values(units, heightMap):    \n    for unit in units:\n        unit['runner'] = False # We don't start as runners.\n        x = unit['location'][0]\n        y = unit['location'][1]\n        targetX, targetY = 0, 0\n        if x < 5:\n            targetX = len(heightMap[0]) - 1\n        if y < 5:\n            targetY = len(heightMap) - 1\n        unit['enemyLocation'] = [targetX, targetY]\n", "name": "actions.py"}, {"data": "# This project provides an example bot that moves to the opposite corner to find the enemy and shoot.\n# This bot should pass the first test if you've added units with weapons and enough ammo.\n\nfrom actions import end_turn, confirm, runner_action, attacker_action, initialise_default_values\nimport json\n\nsetup = json.loads(input())\n\nif setup['action'] != 'setup':\n    print(\"Error: expected setup message!\")\n    exit()\n\nprint(\"Units found:\", setup['units'])\n\nunits = setup['units']\nheightMap = setup['heightMap']\nenemies = []\n\nif len(units) < 1:\n    print(\"Error: no units found. Please add units and launch again.\")\n    exit()\n\n# Set our own custom default values for each unit\ninitialise_default_values(units, heightMap)\n\n# The bot confirms that it finds the \"startTurn\" message before taking any action.\n# Then it skips all incapacitated units.\n# Once it finds a unit, it checks its state to see if it is running\n# away or attacking, and performs the action.\nwhile True:\n    confirm(\"startTurn\", units, enemies, heightMap)\n    print(\"New turn!\")\n\n    for count, unit in enumerate(units):\n        if unit['health'] <= 0:\n            continue\n        if unit['runner']:\n            runner_action(unit, count, units, enemies, heightMap)\n        else:\n            attacker_action(unit, units, enemies, heightMap)\n\n    end_turn()\n", "name": "main.py", "start": true}], "name": "src", "open": true}]