[{"data": "# This project provides an example bot that moves to the opposite corner to find the enemy and shoot.\n# This bot should pass the first test if you've added units with weapons and enough ammo.\nimport json\n\ndef main():\n    setup = json.loads(input())\n\n    if setup['action'] != 'setup':\n        print(\"Error: expected setup message!\")\n        exit()\n\n    print(\"Units found:\", setup['units'])\n\n    units = setup['units']\n    heightMap = setup['heightMap']\n    enemies = dict()\n\n    if len(units) < 1:\n        print(\"Error: no units found. Please add units and launch again.\")\n        exit()\n\n    enemy_corner = get_enemy_corner(units, heightMap)\n    print(\"Enemy corner is at:\", enemy_corner)\n\n    # The bot confirms that it finds the \"startTurn\" message before taking any action.\n    # Then it skips all incapacitated units.\n    # It checks if there are any known enemies and if there are, move closer and attack.\n    # Otherwise, just move to the enemy's corner.\n    while True:\n        wait_for_start_turn(enemies)\n        print(\"New turn!\")\n\n        for unit in units:\n            if unit['health'] <= 0:\n                continue\n            \n            attacked = False\n            for enemy in enemies.values():\n                if enemy['health'] > 0:\n                    print(\"Attacking enemy\", enemy['name'])\n                    target = location_near_enemy(unit, enemy)\n                    move(unit, target)\n                    attack(unit, enemy)\n                    attack(unit, enemy) # Attack twice in case of pistol\n                    reload_weapon(unit) # Reloads if there are any action points left (i.e. failed to shoot)\n                    attacked = True\n                    break\n\n            if not attacked:\n                print(\"Moving unit\", unit['name'], \"towards\", enemy_corner)\n                move(unit, enemy_corner)\n\n        end_turn()\n\n## Some helper functions are below to keep the main loop cleaner:\n\n# Figure out the enemy's corner. They are in the exact opposite corner of our units.\ndef get_enemy_corner(units, heightMap):\n    x, y = 0, 0\n    if units[0]['location'][0] < 5:\n        x = len(heightMap[0]) - 1\n    if units[0]['location'][1] < 5:\n        y = len(heightMap) - 1\n    return [x, y]\n\n# Receive all messages until startTurn is found\ndef wait_for_start_turn(enemies):\n    found = False\n    while not found:\n        message = json.loads(input())\n        if message['action'] == 'startTurn':\n            found = True\n        # If enemy is spotted, add to the list of known enemies\n        elif message['action'] == 'enemy':\n            name = message['name']\n            enemies[name] = message\n            print(\"Enemy\", name, \"spotted at\", message['location'])\n        # If there is shooting, record new health values for enemies!\n        elif message['action'] == \"shot\":\n            name = message['target']\n            if name in enemies:\n                enemies[name]['health'] = message['health']\n                if message['health'] < 0:\n                    print(\"Enemy\", name, \"is down.\")\n\n# Get target location one square away from the enemy's location\ndef location_near_enemy(unit, enemy):\n    unit_x, unit_y = unit['location'][0], unit['location'][1]\n    target_x, target_y = enemy['location'][0], enemy['location'][1]\n    if unit_x < target_x:\n        target_x -= 1\n    else:\n        target_x += 1\n    if unit_y < target_y:\n        target_y -= 1\n    else:\n        target_y += 1\n    return [target_x, target_y]\n\n# Send move action\ndef move(unit, location):\n    action = dict()\n    action['action'] = 'move'\n    action['unit'] = unit['name']\n    action['target'] = location\n    print(json.dumps(action))\n\n# Send attack action\ndef attack(unit, enemy):\n    action = dict()\n    action['action'] = \"attack\"\n    action['unit'] = unit['name']\n    action['item'] = unit['weapon']\n    action['target'] = enemy['location']\n    action['ignoreAllies'] = True\n    print(json.dumps(action))\n\n# Send reload action\ndef reload_weapon(unit):\n    action = dict()\n    action['action'] = 'reload'\n    action['unit'] = unit['name']\n    print(json.dumps(action))\n\n# Send endTurn action\ndef end_turn():\n    action = dict()\n    action['action'] = 'endTurn'\n    print(json.dumps(action))\n\nmain() # Call main function", "name": "main.py", "start": true}]